axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#d1eee9", "#a3d6d6", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #3\nPlayful Polygons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#a3d6d6", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #3\nPlayful Polygons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #3\nPlayful Polygons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
png("04-Byron-Hexagons.png", width = 3200, height = 2100, res = 300)
# Print the plot to the device
print(plot4)
# Close the device
dev.off()
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = c(0.1, 0.1),                  # Position legend at the bottom left
legend.justification = c("left", "bottom"),     # Align legend to the bottom left corner
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Oldest towns are not necessarily the ones with higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Our oldest towns are not necessarily those with a higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing by Subzones",
subtitle = "Our oldest towns are not necessarily those with a higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
png("04-Byron-Hexagons.png", width = 3200, height = 2100, res = 300)
# Print the plot to the device
print(plot4)
# Close the device
dev.off()
custom_palette <- c("#edefea", "#7bbac2", "#5a9baa", "#3f798e", "#2a5674")
plot4 <- ggplot(data = hex_grid) +
geom_sf(aes(fill = coverage), color = NA) +
scale_fill_gradientn(colors = custom_palette, na.value = "lightgrey") +
labs(
title = "Going Public: Proportion of Public Housing across Singapore",
subtitle = "Our oldest towns are not necessarily those with a higher % of public housing...",
fill = "Public Housing Density"
) +
annotate(
"text", x = 104.037, y = 1.27,
label = "30DayMapChallenge\nDay #4\nHomely Hexagons\nByron",
color = "#7f8181", size = 3, hjust = 1, vjust = 1,
family = "Lato"
) +
annotate(
"text", x = 103.609410, y = 1.192789,
label = "",
color = "#7f8181", size = 2, hjust = 0, vjust = 1,
family = "Lato"
) +
theme(
plot.title = element_text(size = 14, face = "bold", family = "Lato"),
plot.subtitle = element_text(size = 12, family = "Lato"),
legend.title = element_text(family = "Lato", size = 10, color = "#474849"),  # Set legend title font
legend.text = element_text(family = "Lato", size = 10, color = "#474849"),   # Set legend text font
legend.position = "right",                     # Position legend at the bottom
axis.title = element_blank(),
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank()
)
plot4
png("04-Byron-Hexagons.png", width = 3200, height = 2100, res = 300)
# Print the plot to the device
print(plot4)
# Close the device
dev.off()
str(sg)
st_bbox(sgz)
st_bbox(sg)
# Load necessary libraries
library(sf)
library(ggplot2)
# Create a function to generate points for a smiling cat face
create_cat_face <- function(n = 5000) {
# Define bounding box based on st_bbox(sg)
bbox <- c(xmin = 103.620759, ymin = 1.237801, xmax = 104.033445, ymax = 1.470775)
# Generate points for the cat's face (circle)
theta <- seq(0, 2 * pi, length.out = n)
x_face <- 0.25 * cos(theta) + mean(c(bbox["xmin"], bbox["xmax"]))
y_face <- 0.25 * sin(theta) + mean(c(bbox["ymin"], bbox["ymax"]))
# Generate points for the eyes (two small circles)
x_eye1 <- 0.02 * cos(theta) + (mean(c(bbox["xmin"], bbox["xmax"])) - 0.08)
y_eye1 <- 0.02 * sin(theta) + (mean(c(bbox["ymin"], bbox["ymax"])) + 0.08)
x_eye2 <- 0.02 * cos(theta) + (mean(c(bbox["xmin"], bbox["xmax"])) + 0.08)
y_eye2 <- 0.02 * sin(theta) + (mean(c(bbox["ymin"], bbox["ymax"])) + 0.08)
# Generate points for the mouth (smile)
mouth_theta <- seq(0, pi, length.out = 100)
x_mouth <- 0.15 * cos(mouth_theta) + mean(c(bbox["xmin"], bbox["xmax"]))
y_mouth <- 0.1 * sin(mouth_theta) + (mean(c(bbox["ymin"], bbox["ymax"])) - 0.1)
# Combine all points
x_all <- c(x_face, x_eye1, x_eye2, x_mouth)
y_all <- c(y_face, y_eye1, y_eye2, y_mouth)
# Create a data frame of the points
points_df <- data.frame(x = x_all, y = y_all)
# Convert to an sf object
sf_points <- st_as_sf(points_df, coords = c("x", "y"), crs = 4326)
return(sf_points)
}
# Generate the cat face points
cat_face_sf <- create_cat_face(5000)
# Plot the points to visualize the smiling cat face
ggplot(data = cat_face_sf) +
geom_sf(color = "black", size = 0.5) +
coord_sf(xlim = c(103.620759, 104.033445), ylim = c(1.237801, 1.470775)) +
theme_minimal() +
labs(title = "Smiling Cat Face")
library(sf)
library(dplyr)
# Define bounding box from the sg object
bbox <- st_bbox(sg)
# Generate points for the cat's face
set.seed(123)  # For reproducibility
# Create a data frame to hold the points
points_df <- data.frame(x = numeric(), y = numeric())
# Generate points for the cat's head (circle)
n_head <- 5000  # Total points for the head
head_radius <- 0.1  # Adjust the size of the head
# Generate head points
theta <- seq(0, 2 * pi, length.out = n_head)
head_x <- head_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2
head_y <- head_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2
# Combine head points
points_df <- rbind(points_df, data.frame(x = head_x, y = head_y))
# Generate points for the eyes
eye_radius <- 0.01  # Adjust the size of the eyes
eye_x_left <- eye_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2 - 0.04
eye_y_left <- eye_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2 + 0.05
eye_x_right <- eye_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2 + 0.04
eye_y_right <- eye_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2 + 0.05
# Combine eye points
points_df <- rbind(points_df, data.frame(x = eye_x_left, y = eye_y_left))
points_df <- rbind(points_df, data.frame(x = eye_x_right, y = eye_y_right))
# Generate points for the mouth (smile)
n_mouth <- 50  # Number of points for the mouth
mouth_x <- seq(-0.05, 0.05, length.out = n_mouth) + (bbox$xmin + bbox$xmax) / 2
mouth_y <- -0.1 * (sin(seq(0, pi, length.out = n_mouth))) + (bbox$ymin + bbox$ymax) / 2 - 0.05
# Combine mouth points
points_df <- rbind(points_df, data.frame(x = mouth_x, y = mouth_y))
# Create an sf object from the points
cat_face_sf <- st_as_sf(points_df, coords = c("x", "y"), crs = st_crs(sg))
# Optionally plot the points to check
plot(st_geometry(cat_face_sf), col = "yellow", pch = 19, main = "Smiling Cat Face")
library(sf)
library(dplyr)
# Define bounding box from the sg object
bbox <- st_bbox(sg)
# Generate points for the cat's face
set.seed(123)  # For reproducibility
# Create a data frame to hold the points
points_df <- data.frame(x = numeric(), y = numeric())
# Generate points for the cat's head (circle)
n_head <- 5000  # Total points for the head
head_radius <- 0.1  # Adjust the size of the head
# Generate head points
theta <- seq(0, 2 * pi, length.out = n_head)
head_x <- head_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2
head_y <- head_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2
# Combine head points
points_df <- rbind(points_df, data.frame(x = head_x, y = head_y))
# Generate points for the eyes
eye_radius <- 0.01  # Adjust the size of the eyes
eye_x_left <- eye_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2 - 0.04
eye_y_left <- eye_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2 + 0.05
eye_x_right <- eye_radius * cos(theta) + (bbox$xmin + bbox$xmax) / 2 + 0.04
eye_y_right <- eye_radius * sin(theta) + (bbox$ymin + bbox$ymax) / 2 + 0.05
# Combine eye points
points_df <- rbind(points_df, data.frame(x = eye_x_left, y = eye_y_left))
points_df <- rbind(points_df, data.frame(x = eye_x_right, y = eye_y_right))
# Generate points for the mouth (smile)
n_mouth <- 50  # Number of points for the mouth
mouth_x <- seq(-0.05, 0.05, length.out = n_mouth) + (bbox$xmin + bbox$xmax) / 2
mouth_y <- -0.1 * (sin(seq(0, pi, length.out = n_mouth))) + (bbox$ymin + bbox$ymax) / 2 - 0.05
# Combine mouth points
points_df <- rbind(points_df, data.frame(x = mouth_x, y = mouth_y))
# Create an sf object from the points
cat_face_sf <- st_as_sf(points_df, coords = c("x", "y"), crs = st_crs(sg))
# Optionally plot the points to check
plot(st_geometry(cat_face_sf), col = "yellow", pch = 19, main = "Smiling Cat Face")
plot_combined <- ggplot() +
geom_sf(data = sg, fill = NA, color = "blue", size = 0.5) +  # Plot sg with a border
geom_sf(data = cat_face_sf, color = "yellow", size = 1.5) +  # Plot the cat face points
labs(title = "Cat Face Within Subzones",
subtitle = "Smiling Cat Face Represented with Points") +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10)
)
# Display the plot
print(plot_combined)
library(sf)
library(dplyr)
library(ggplot2)
# Define bounding box from the sg object
bbox <- st_bbox(sg)
# Generate points for the cat's face (oval)
set.seed(123)  # For reproducibility
# Create a data frame to hold the points
points_df <- data.frame(x = numeric(), y = numeric())
# Generate head points for an oval shape
n_head <- 5000  # Total points for the head
head_oval_x <- seq(-0.1, 0.1, length.out = n_head)
head_oval_y <- (0.05 * (1 - (head_oval_x^2) / (0.1^2))) + (bbox$ymin + bbox$ymax) / 2
# Combine head points
head_x <- head_oval_x + (bbox$xmin + bbox$xmax) / 2
head_y <- head_oval_y + (bbox$ymin + bbox$ymax) / 2
points_df <- rbind(points_df, data.frame(x = head_x, y = head_y))
# Generate points for the ears
ear_radius <- 0.02  # Adjust the size of the ears
ear_left_x <- c(-0.1, -0.1 + ear_radius * cos(seq(0, pi, length.out = 50)))
ear_left_y <- c(0.05, 0.05 + ear_radius * sin(seq(0, pi, length.out = 50))) + (bbox$ymin + bbox$ymax) / 2
ear_right_x <- c(0.1, 0.1 - ear_radius * cos(seq(0, pi, length.out = 50)))
ear_right_y <- c(0.05, 0.05 + ear_radius * sin(seq(0, pi, length.out = 50))) + (bbox$ymin + bbox$ymax) / 2
# Combine ear points
points_df <- rbind(points_df, data.frame(x = ear_left_x + (bbox$xmin + bbox$xmax) / 2,
y = ear_left_y))
points_df <- rbind(points_df, data.frame(x = ear_right_x + (bbox$xmin + bbox$xmax) / 2,
y = ear_right_y))
# Generate points for the mouth (smile in a 'w' shape)
n_mouth <- 50  # Number of points for the mouth
mouth_x <- seq(-0.04, 0.04, length.out = n_mouth) + (bbox$xmin + bbox$xmax) / 2
mouth_y <- -0.05 * (sin(seq(0, pi, length.out = n_mouth))) + (bbox$ymin + bbox$ymax) / 2 - 0.03
# Combine mouth points
points_df <- rbind(points_df, data.frame(x = mouth_x, y = mouth_y))
# Create an sf object from the points
cat_face_sf <- st_as_sf(points_df, coords = c("x", "y"), crs = st_crs(sg))
# Optionally plot the points to check
plot(st_geometry(cat_face_sf), col = "yellow", pch = 19, main = "Smiling Cat Face")
plot_combined <- ggplot() +
geom_sf(data = sg, fill = NA, color = "blue", size = 0.5) +  # Plot sg with a border
geom_sf(data = cat_face_sf, color = "yellow", size = 1.5) +  # Plot the cat face points
labs(title = "Cat Face Within Subzones",
subtitle = "Smiling Cat Face Represented with Points") +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10)
)
# Display the plot
print(plot_combined)
